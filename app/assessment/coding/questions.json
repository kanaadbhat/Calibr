[
  {
    "id": 1,
    "title": "Two Sum",
    "difficulty": "Easy",
    "description": "Given an array of integers `nums` and an integer `target`, return *indices of the two numbers such that they add up to `target`*.",
    "constraints": [
      "2 ≤ nums.length ≤ 10⁴",
      "-10⁹ ≤ nums[i] ≤ 10⁹",
      "-10⁹ ≤ target ≤ 10⁹",
      "Only one valid answer exists."
    ],
    "examples": [
      {
        "input": "nums = [2,7,11,15], target = 9",
        "output": "[0,1]",
        "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
      },
      {
        "input": "nums = [3,2,4], target = 6",
        "output": "[1,2]",
        "explanation": "Because nums[1] + nums[2] == 6, we return [1, 2]."
      }
    ],
    "starterCode": {
      "javascript": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    // Your code here\n};",
      "python": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        # Your code here\n        pass",
      "java": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        // Your code here\n    }\n}",
      "cpp": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        // Your code here\n    }\n};"
    },
    "testCases": [
      {
        "input": { "nums": [2, 7, 11, 15], "target": 9 },
        "expected": [0, 1]
      },
      {
        "input": { "nums": [3, 2, 4], "target": 6 },
        "expected": [1, 2]
      },
      {
        "input": { "nums": [3, 3], "target": 6 },
        "expected": [0, 1]
      },
      {
        "input": { "nums": [3, 3, 2], "target": 5 },
        "expected": [0, 2]
      }
    ],
    "executionConfig": {
      "functionName": "twoSum",
      "className": "Solution",
      "cppTestTemplate": "vector<int> nums = {${input.nums}};\nint target = ${input.target};\n\nSolution solution;\nvector<int> result = solution.twoSum(nums, target);\n\ncout << \"[\";\nfor (int i = 0; i < result.size(); i++) {\n    cout << result[i];\n    if (i < result.size() - 1) cout << \",\";\n}\ncout << \"]\" << endl;",
      "cppIncludes": ["iostream", "vector", "unordered_map"]
    }
  },
  {
    "id": 2,
    "title": "Longest Substring Without Repeating Characters",
    "difficulty": "Medium",
    "description": "Given a string `s`, find the length of the **longest substring** without repeating characters.",
    "constraints": [
      "0 ≤ s.length ≤ 5 * 10⁴",
      "s consists of English letters, digits, symbols and spaces."
    ],
    "examples": [
      {
        "input": "s = \"abcabcbb\"",
        "output": "3",
        "explanation": "The answer is \"abc\", with the length of 3."
      },
      {
        "input": "s = \"bbbbb\"",
        "output": "1",
        "explanation": "The answer is \"b\", with the length of 1."
      }
    ],
    "starterCode": {
      "javascript": "/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    // Your code here\n};",
      "python": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        # Your code here\n        pass",
      "java": "class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        // Your code here\n    }\n}",
      "cpp": "class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        // Your code here\n    }\n};"
    },
    "testCases": [
      {
        "input": { "s": "abcabcbb" },
        "expected": 3
      },
      {
        "input": { "s": "bbbbb" },
        "expected": 1
      },
      {
        "input": { "s": "pwwkew" },
        "expected": 3
      }
    ],
    "executionConfig": {
      "functionName": "lengthOfLongestSubstring",
      "className": "Solution",
      "cppTestTemplate": "string s = \"${input.s}\";\n\nSolution solution;\nint result = solution.lengthOfLongestSubstring(s);\n\ncout << result << endl;",
      "cppIncludes": ["iostream", "string", "unordered_map", "algorithm"]
    }
  },
  {
    "id": 3,
    "title": "Lexicographically Smallest Circular Subarray",
    "difficulty": "Hard",
    "description": "Given an array of integers and an integer k, find the lexicographically smallest circular subarray of length k.",
    "constraints": [
      "1 ≤ arr.length ≤ 10⁴",
      "1 ≤ k ≤ arr.length",
      "-10⁹ ≤ arr[i] ≤ 10⁹"
    ],
    "examples": [
      {
        "input": "arr = [5,4,3,2,1], k = 3",
        "output": "[1,5,4]",
        "explanation": "The circular subarrays are [5,4,3], [4,3,2], [3,2,1], [2,1,5], [1,5,4]. The lexicographically smallest is [1,5,4]."
      }
    ],
    "starterCode": {
      "javascript": "/**\n * @param {number[]} arr\n * @param {number} k\n * @return {number[]}\n */\nvar smallestCircularSubarray = function(arr, k) {\n    // Your code here\n};",
      "python": "class Solution:\n    def smallestCircularSubarray(self, arr: List[int], k: int) -> List[int]:\n        # Your code here\n        pass",
      "java": "class Solution {\n    public int[] smallestCircularSubarray(int[] arr, int k) {\n        // Your code here\n    }\n}",
      "cpp": "class Solution {\npublic:\n    vector<int> smallestCircularSubarray(vector<int>& arr, int k) {\n        // Your code here\n    }\n};"
    },
    "testCases": [
      {
        "input": { "arr": [5, 4, 3, 2, 1], "k": 3 },
        "expected": [1, 5, 4]
      },
      {
        "input": { "arr": [1, 2, 3], "k": 2 },
        "expected": [1, 2]
      }
    ],
    "executionConfig": {
      "functionName": "smallestCircularSubarray",
      "className": "Solution",
      "cppTestTemplate": "vector<int> arr = {${input.arr}};\nint k = ${input.k};\n\nSolution solution;\nvector<int> result = solution.smallestCircularSubarray(arr, k);\n\ncout << \"[\";\nfor (int i = 0; i < result.size(); i++) {\n    cout << result[i];\n    if (i < result.size() - 1) cout << \",\";\n}\ncout << \"]\" << endl;",
      "cppIncludes": ["iostream", "vector", "algorithm"]
    }
  }
]